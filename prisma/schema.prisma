// Academic Resource & Learning Hub - Complete Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// User Management & Authentication
// =============================================================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  role          UserRole  @default(STUDENT)
  avatar        String?
  bio           String?
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Student Relations
  enrollments   ClassEnrollment[]
  submissions   Submission[]
  grades        Grade[]
  feedbackGiven Feedback[] @relation("FeedbackAuthor")
  chatSessions  AIChatSession[]
  uploadedDocs  Document[] @relation("DocumentUploader")

  // Teacher Relations
  teachingClasses Class[] @relation("ClassTeacher")
  createdAssignments Assignment[]
  givenGrades     Grade[] @relation("GradeTeacher")
  teacherFeedback Feedback[] @relation("TeacherFeedback")

  @@map("users")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

// =============================================================================
// Academic Structure
// =============================================================================

model Subject {
  id          String @id @default(cuid())
  name        String @unique
  code        String @unique
  description String?
  color       String @default("#3b82f6")
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  classes     Class[]
  documents   Document[]
  assignments Assignment[]

  @@map("subjects")
}

model Class {
  id          String   @id @default(cuid())
  name        String
  description String?
  subjectId   String
  teacherId   String
  semester    String
  year        Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subject     Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher     User    @relation("ClassTeacher", fields: [teacherId], references: [id], onDelete: Cascade)
  
  enrollments ClassEnrollment[]
  assignments Assignment[]

  @@unique([name, subjectId, year, semester])
  @@map("classes")
}

model ClassEnrollment {
  id        String   @id @default(cuid())
  classId   String
  studentId String
  enrolledAt DateTime @default(now())

  class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  student User  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classId, studentId])
  @@map("class_enrollments")
}

// =============================================================================
// Document Management
// =============================================================================

model Document {
  id            String      @id @default(cuid())
  title         String
  description   String?
  fileName      String
  filePath      String
  fileSize      BigInt
  mimeType      String
  type          DocumentType @default(OTHER)
  subjectId     String
  uploaderId    String
  isShared      Boolean     @default(false)
  allowPeerFeedback Boolean @default(true)
  downloadCount Int         @default(0)
  averageRating Float       @default(0)
  totalRatings  Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  subject       Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  uploader      User    @relation("DocumentUploader", fields: [uploaderId], references: [id], onDelete: Cascade)
  
  versions      DocumentVersion[]
  feedback      Feedback[]
  tags          DocumentTag[]
  assignments   AssignmentDocument[]

  @@index([subjectId, type])
  @@index([uploaderId])
  @@index([isShared, averageRating])
  @@map("documents")
}

enum DocumentType {
  NOTES
  CODE
  VIDEO
  OTHER
}

model DocumentVersion {
  id         String   @id @default(cuid())
  documentId String
  version    Int
  fileName   String
  filePath   String
  fileSize   BigInt
  changes    String?
  createdAt  DateTime @default(now())

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, version])
  @@map("document_versions")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String   @default("#6b7280")
  createdAt DateTime @default(now())

  documents DocumentTag[]

  @@map("tags")
}

model DocumentTag {
  id         String @id @default(cuid())
  documentId String
  tagId      String

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([documentId, tagId])
  @@map("document_tags")
}

// =============================================================================
// Feedback System
// =============================================================================

model Feedback {
  id         String      @id @default(cuid())
  documentId String
  authorId   String
  teacherId  String?
  rating     Int         @default(0) // 1-5 stars
  comment    String?
  type       FeedbackType @default(PEER)
  isPublic   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  author   User     @relation("FeedbackAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  teacher  User?    @relation("TeacherFeedback", fields: [teacherId], references: [id], onDelete: SetNull)

  @@unique([documentId, authorId])
  @@index([documentId, type])
  @@map("feedback")
}

enum FeedbackType {
  PEER
  TEACHER
}

// =============================================================================
// Assignment System
// =============================================================================

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String
  subjectId   String
  classId     String
  teacherId   String
  dueDate     DateTime
  maxPoints   Int      @default(100)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subject     Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  class       Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher     User    @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  
  documents   AssignmentDocument[]
  submissions Submission[]

  @@index([classId, dueDate])
  @@map("assignments")
}

model AssignmentDocument {
  id           String @id @default(cuid())
  assignmentId String
  documentId   String

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  document   Document   @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([assignmentId, documentId])
  @@map("assignment_documents")
}

model Submission {
  id           String           @id @default(cuid())
  assignmentId String
  studentId    String
  filePath     String?
  fileName     String?
  fileSize     BigInt?
  content      String?
  status       SubmissionStatus @default(SUBMITTED)
  submittedAt  DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  grades     Grade[]

  @@unique([assignmentId, studentId])
  @@map("submissions")
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  GRADED
  RETURNED
}

model Grade {
  id           String   @id @default(cuid())
  submissionId String
  studentId    String
  teacherId    String
  points       Int
  maxPoints    Int
  feedback     String?
  gradedAt     DateTime @default(now())
  updatedAt    DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher    User       @relation("GradeTeacher", fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([submissionId])
  @@map("grades")
}

// =============================================================================
// AI Chat System
// =============================================================================

model AIChatSession {
  id        String   @id @default(cuid())
  userId    String
  title     String   @default("New Chat")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages AIChatMessage[]

  @@map("ai_chat_sessions")
}

model AIChatMessage {
  id        String   @id @default(cuid())
  sessionId String
  role      String   // 'user' or 'assistant'
  content   String
  createdAt DateTime @default(now())

  session AIChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("ai_chat_messages")
}

// =============================================================================
// System Analytics
// =============================================================================

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  details   Json?
  ipAddress String?
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@map("activity_logs")
}